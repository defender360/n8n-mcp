# Railway-specific Dockerfile - No cache mounts for guaranteed compatibility
FROM node:20-alpine

WORKDIR /app

# Install system dependencies
RUN apk add --no-cache curl python3 make g++ && \
    rm -rf /var/cache/apk/*

# Copy package files
COPY package.json package-lock.json* ./
COPY package.runtime.json ./

# Install ALL dependencies (build + runtime)
RUN npm install

# Copy TypeScript configuration
COPY tsconfig.json ./

# Copy source code
COPY src ./src

# Build TypeScript
RUN npx tsc

# Copy database and other files
COPY data/nodes.db ./data/
COPY src/database/schema-optimized.sql ./src/database/
COPY .env.example ./

# Copy entrypoint if it exists
COPY docker/docker-entrypoint.sh /usr/local/bin/ 2>/dev/null || echo "#!/bin/sh\nexec \"\$@\"" > /usr/local/bin/docker-entrypoint.sh
RUN chmod +x /usr/local/bin/docker-entrypoint.sh

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001 && \
    chown -R nodejs:nodejs /app

# Switch to non-root user
USER nodejs

# Set environment
ENV IS_DOCKER=true
ENV NODE_ENV=production

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f http://127.0.0.1:3000/health || exit 1

# Start command
ENTRYPOINT ["/usr/local/bin/docker-entrypoint.sh"]
CMD ["node", "dist/mcp/index.js"]